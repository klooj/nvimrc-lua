{
  "cfg": {
    "body": [
      "#[cfg(${1})]"
    ],
    "description": "#[cfg(\u2026)]",
    "prefix": "cfg"
  },
  "derive": {
    "body": [
      "#[derive(${1})]"
    ],
    "description": "#[derive(\u2026)]",
    "prefix": "derive"
  },
  "extern crate": {
    "body": [
      "extern crate ${1:name};"
    ],
    "description": "Insert extern crate",
    "prefix": "extern crate"
  },
  "for": {
    "body": [
      "for ${1:elem} in ${2:iter} {",
      "\t$0",
      "}"
    ],
    "description": "Insert for loop",
    "prefix": "for"
  },
  "if let": {
    "body": [
      "if let ${1:pattern} = ${2:value} {",
      "\t$3",
      "}"
    ],
    "description": "Insert if to match a specific pattern, useful for enum variants e.g. `Some(inner)`",
    "prefix": "if let"
  },
  "macro_rules": {
    "body": [
      "macro_rules! $1 {",
      "\t($2) => {",
      "\t\t$0",
      "\t};",
      "}"
    ],
    "description": "Insert macro_rules!",
    "prefix": "macro_rules"
  },
  "spawn": {
    "body": [
      "std::thread::spawn(move || {",
      "\t$1",
      "})"
    ],
    "description": "Wrap code in thread::spawn",
    "prefix": [
      "thread_spawn",
      "spawn"
    ]
  },
  "test": {
    "body": [
      "#[test]",
      "fn ${1:name}() {",
      "    ${2:unimplemented!();}",
      "}"
    ],
    "description": "#[test]",
    "prefix": "test"
  }
}
