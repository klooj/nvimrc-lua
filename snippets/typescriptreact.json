{
  "Create useCallback hook": {
    "body": [
      "const ${1:memoizedCallback} = useCallback(() => {",
      "\t",
      "}, []);"
    ],
    "description": "Creates React useCallback hook",
    "prefix": "useCallback"
  },
  "Create useContext hook": {
    "body": [
      "const ${1:value} = useContext(MyContext);"
    ],
    "description": "Creates React useContext hook",
    "prefix": "useContext"
  },
  "Create useDebugValue hook": {
    "body": [
      "useDebugValue(${1:value}"
    ],
    "description": "Creates React useDebugValue hook",
    "prefix": "useDebugValue"
  },
  "Create useDispatch hook": {
    "body": [
      "const dispatch = useDispatch();"
    ],
    "description": "Creates Redux useDispatch hook",
    "prefix": "useDispatch"
  },
  "Create useEffect hook": {
    "body": [
      "useEffect(() => {",
      "\t",
      "}, []);"
    ],
    "description": "Creates React useEffect hook",
    "prefix": "useEffect"
  },
  "Create useImperativeHandle hook": {
    "body": [
      "useImperativeHandle(${1:initialValue}, () => {",
      "\t",
      "}, []);"
    ],
    "description": "Creates React useImperativeHandle hook",
    "prefix": "useImperativeHandle"
  },
  "Create useLayoutEffect hook": {
    "body": [
      "useLayoutEffect(() => {",
      "\t",
      "}, []);"
    ],
    "description": "Creates React useLayoutEffect hook",
    "prefix": "useLayoutEffect"
  },
  "Create useMemo hook": {
    "body": [
      "const ${1:memoizedValue} = useMemo(() => {",
      "\t",
      "}, []);"
    ],
    "description": "Creates React useMemo hook",
    "prefix": "useMemo"
  },
  "Create useReducer hook": {
    "body": [
      "const [${1:state}, dispatch] = useReducer(${2:reducer}, initialState);"
    ],
    "description": "Creates React useReducer hook",
    "prefix": "useReducer"
  },
  "Create useRef hook": {
    "body": [
      "const ${1:refContainer} = useRef(${2:initialValue});"
    ],
    "description": "Creates React useRef hook",
    "prefix": "useRef"
  },
  "Create useSelector hook": {
    "body": [
      "const ${1:selectedData} = useSelector(state => state.${2:YourObject});"
    ],
    "description": "Creates Redux useSelector hook",
    "prefix": "useSelector"
  },
  "Create useState hook": {
    "body": [
      "const [${1:state}, set${1:State}] = useState(${2:defaultState});"
    ],
    "description": "Creates React useState hook",
    "prefix": "useState"
  },
  "Create useStore hook": {
    "body": [
      "const store = useStore();"
    ],
    "description": "Creates Redux useStore hook",
    "prefix": "useStore"
  },
  "Import React": {
    "body": [
      "import React from 'react';"
    ],
    "description": "Imports React",
    "prefix": "imr"
  },
  "componentFunctionalTypescript": {
    "body": [
      "import React from 'react';",
      "",
      "const ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}}: React.FC = () => {",
      "  return <div />;",
      "}",
      "",
      "export default ${1:${TM_DIRECTORY/^.*(\\/|\\\\)([^(\\/|\\\\)]+)$/$2/}};"
    ],
    "description": "Create ReactJS Functional Component Typescript",
    "prefix": "rfc"
  }
}
