snippet pass_args "Pass arguments"
" Pass arguments through
" fun! Foo(arg, ...)
"     if a:0
"         exe 'call Bar(a:arg1, a:arg2, ' . join(map(range(a:0), '"a:000[" . v:val . "]"'), ', ') . ')'
"     else
"         call Bar(a:arg, "foo")
"     endif
" endfunction
endsnippet


snippet check_key_single "Getting a single key"
if has_key(${1:a:response}, '$2')
  let l:$2Value = get($1, '$2', ${3:v:false})

  call langserver#${4:capabilities}#set_$2(l:$2Value)
endif
endsnippet

snippet function_key_single "Function for a single key"
""
"
function! langserver#capabilities#set_$1(name, $2) abort
  let l:config_dict = s:prepare_capabiilties(a:name)

  let l:config_dict['$2'] = a:$2
endfunction
endsnippet

snippet check_key "Checking and getting a key"
if has_key(${1:a:response}, '$2')
  let l:$2_$3 = get($1['$2'], $3, $4)
endif
endsnippet

snippet auto "Autoload function"
""
" $1
function! `!v tj#easy_autoload()`$2 abort
  $3
endfunction
endsnippet

snippet snip_configuration "An entire configuration setup for a plugin"
" Options are set using the api
" call `!v tj#easy_autoload()`set(area, setting, value)
"
" and can be viewed with
" call `!v tj#easy_autoload()`get(area, setting)
"
" to view the configuration dictionary
" call `!v tj#easy_autoload()`#view()


""
" Configuration options for $1
let s:plugin_configuration = {
      \ 'defaults': {
        \ },
      \ }

function! `!v tj#easy_autoload()`get(area, setting) abort
  let config_area = has_key(s:plugin_configuration, a:area) ?
    \ s:plugin_configuration[a:area] :
    \ execute(printf('throw "[$1]. No key ''%s''"', a:area))

  return has_key(config_area, a:setting) ?
    \ config_area[a:setting] :
    \ execute(printf('throw "[$1]. No setting ''%s'' for area ''%s''"', a:setting, a:area))
endfunction

function! `!v tj#easy_autoload()`set(area, setting, value) abort
  let config_area = has_key(s:plugin_configuration, a:area) ?
    \ s:plugin_configuration[a:area] :
    \ execute(printf('throw "[$1]. No key ''%s''"', a:area))

  return has_key(config_area, a:setting) ?
    \ execute('let s:plugin_configuration[a:area][a:setting] = a:value') :
    \ execute(printf('throw "[$1]. No setting ''%s'' for area ''%s''"', a:setting, a:area))
endfunction

function! `!v tj#easy_autoload()`view() abort
  return copy(s:plugin_configuration)
endfunction
endsnippet

snippet conf_guard "Guard the file if it should not be loaded"
if !exists('g:loaded_${1:plug_name}')
  runtime! plugin/$1.vim
endif

if g:loaded_$1 == v:null
  echoerr '[$1] Could not load because of setup issues. Check ":messages"'
  finish
endif

endsnippet

snippet conf_check "Check if we have the correct files installed"
let s:has_confvim = get(s:, 'has_confvim', stridx(&runtimepath, 'conf.vim') >= 0)
let s:has_standardvim = get(s:, 'has_standardvim', stridx(&runtimepath, 'standard.vim') >= 0)

let g:loaded_$2 = v:null
if !s:has_confvim
  echoerr '[${1:PLUG_NAME}] ${2:plug_name} requires the plugin "tjdevries/conf.vim". Please install it'
  finish
endif

if !s:has_standardvim
  echoerr '[$1] $2 requires the plugin "tjdevries/standard.vim". Please install it.'
  finish
endif

let g:loaded_$2 = v:true

" Load the config and get all the mappings as necessary
runtime! autoload/$2/${3:conf}.vim
endsnippet
